#ifndef _CAN_BUS_TASK_H_
#define _CAN_BUS_TASK_H_


#define RATE_BUF_SIZE 6
typedef struct{
	s32 raw_value;
	s32 last_raw_value;
	s32 ecd_value;
	s32 diff;
	s32 temp_count;
	u8  buf_count;
	s32 ecd_bias;
	s32 ecd_raw_rate;
	s32 rate_buf[RATE_BUF_SIZE];
	s32 round_cnt;
	s32 filter_rate;
	float ecd_angle;
}Encoder;

/* CAN Bus 1 */  
#define CAN_BUS1_ZGYRO_FEEDBACK_MSG_ID            0x401

/* CAN Bus 2 */  
#define CAN_BUS2_MOTOR1_FEEDBACK_MSG_ID           0x201
#define CAN_BUS2_MOTOR2_FEEDBACK_MSG_ID           0x202 
#define CAN_BUS2_MOTOR3_FEEDBACK_MSG_ID           0x203
#define CAN_BUS2_MOTOR4_FEEDBACK_MSG_ID           0x204
#define CAN_BUS2_MOTOR5_FEEDBACK_MSG_ID           0x205
#define CAN_BUS2_MOTOR6_FEEDBACK_MSG_ID           0x206

#define CAN_BUS1_ZGYRO_FEEDBACK_MSG_ID   		  0x401

extern volatile Encoder CM1Encoder;
extern volatile Encoder CM2Encoder;
extern volatile Encoder CM3Encoder;
extern volatile Encoder CM4Encoder;
extern volatile Encoder GMYawEncoder;
extern volatile Encoder GMPitchEncoder;
extern float ZGyroModuleAngle;

void GetEncoderBias(volatile Encoder *v);
void EncoderProcess(volatile Encoder *v);
void CanReceiveMsgProcess(void);
void Set_Gimbal_Current(s16 gimbal_pitch_iq, s16 gimbal_yaw_iq);
void Set_CM_Speed(s16 cm1_iq, s16 cm2_iq, s16 cm3_iq, s16 cm4_iq);




#endif

